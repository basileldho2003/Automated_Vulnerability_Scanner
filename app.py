from flask import Flask, render_template, request, redirect, url_for, flash
import logging
from database import SessionLocal, Target, ScanResult
from scanner import add_target, scan_xss, save_scan_result, get_remediation_suggestions
from flask_session import Session

logging.basicConfig(filename='app.log', level=logging.DEBUG, 
                    format='%(asctime)s %(levelname)s: %(message)s')

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['SESSION_TYPE'] = 'filesystem'
Session(app)

@app.route('/')
def index():
    session_db = SessionLocal()
    targets = session_db.query(Target).all()
    scan_results = session_db.query(ScanResult).all()
    session_db.close()
    return render_template('index.html', targets=targets, scan_results=scan_results)

@app.route('/add_target', methods=['POST'])
def add_target_route():
    url = request.form['url']
    logging.debug(f"Adding target URL: {url}")
    success, message = add_target(url)
    if not success:
        flash(message, 'error')
        return redirect(url_for('index'))
    flash(message, 'success')
    return redirect(url_for('index'))

@app.route('/scan/<int:target_id>')
def scan(target_id):
    session_db = SessionLocal()
    target = session_db.query(Target).get(target_id)
    if target:
        logging.debug(f"Scanning target: {target.url}")
        xss_result, xss_desc = scan_xss(target.url)

        logging.debug(f"XSS result: {xss_result}, Description: {xss_desc}")

        if xss_result:
            save_scan_result(target.id, target.url, "XSS", xss_desc, get_remediation_suggestions("XSS"))
        else:
            save_scan_result(target.id, target.url, "No Vulnerabilities", "No vulnerabilities detected", "No remediation needed")

    session_db.close()
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)